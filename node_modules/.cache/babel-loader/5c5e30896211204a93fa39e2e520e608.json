{"ast":null,"code":"var _jsxFileName = \"/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/BA-Study/src/components/SurveyComponent.js\";\nimport React, { Component } from \"react\";\nimport * as Survey from \"survey-react\";\nimport \"survey-react/survey.css\";\nimport \"./Survey.css\";\n\nclass SurveyComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: 0\n    };\n    this.json = {\n      showQuestionNumbers: \"off\",\n      elements: [{\n        type: \"radiogroup\",\n        name: \"gender\",\n        title: \"Please select your gender\",\n        isRequired: true,\n        colCount: 4,\n        choices: [\"male\", \"female\", \"other\", \"prefer not to say\"]\n      }, {\n        type: \"text\",\n        name: \"age\",\n        title: \"What is your age?\",\n        isRequired: true\n      }, {\n        type: \"text\",\n        name: \"background\",\n        title: \"What is your background? (eg. Computer Science)\",\n        isRequired: true\n      }, {\n        type: \"dropdown\",\n        name: \"Alert\",\n        title: \"Which phishing alert helped you the most with recognizing the phishing emails\",\n        isRequired: true,\n        colCount: 0,\n        choices: [\"Link with the red background\", \"Blocked Link with the tooltip\", \"Grey Overlay\"]\n      }, {\n        type: \"matrix\",\n        name: \"User Experience\",\n        isRequired: true,\n        title: \"Please indicate if you agree or disagree with the following statements.\",\n        columns: [{\n          value: 1,\n          text: \"Strongly Disagree\"\n        }, {\n          value: 2,\n          text: \"Disagree\"\n        }, {\n          value: 3,\n          text: \"Neutral\"\n        }, {\n          value: 4,\n          text: \"Agree\"\n        }, {\n          value: 5,\n          text: \"Strongly Agree\"\n        }],\n        rows: [{\n          value: \"Experience IT Security\",\n          text: \"I have experience with IT Security. \"\n        }, {\n          value: \"Information presented enough\",\n          text: \"I used information provided in the interface to categorize the emails. (e.g. email subject)\"\n        }, {\n          value: \"Categorize Inbox\",\n          text: \" I found it easy to categorize the emails as 'Inbox'.\"\n        }, {\n          value: \"Categorize Spam\",\n          text: \"I found it easy to categorize the emails as 'Spam'.\"\n        }, {\n          value: \"Categorize Bin\",\n          text: \"I found it easy to categorize the emails as 'bin'.\"\n        }]\n      }, {\n        type: \"text\",\n        name: \"Red background\",\n        isRequired: true,\n        title: \"Which aspects of the phishing alert with the red background were helpful? (key words are enough)\"\n      }, {\n        type: \"text\",\n        name: \"Blocked Link\",\n        isRequired: true,\n        title: \"Which aspects of the phishing alert with the blocked link and the tooltip were helpful? (key words are enough)\"\n      }, {\n        type: \"text\",\n        name: \"Grey Overlay\",\n        isRequired: true,\n        title: \"Which aspects of the phishing alert with the grey overlay were helpful? (key words are enough)\"\n      }]\n    };\n\n    this.onComplete = (survey, options) => {\n      //Write survey results into database\n      console.log(\"Survey results: \" + JSON.stringify(survey.data)); //Send to Server\n\n      const data = {\n        userID: this.state.userID,\n        emailAdress: this.state.emailAdress,\n        UserName: this.state.UserName,\n        userAnswers: survey.data\n      };\n      console.log(data);\n      const response = fetch(\"/SurveyData\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(console.log(\"sentSurveyToServer\"));\n    };\n  }\n\n  componentDidMount() {\n    let userID = this.props.userInfo.userID;\n    let emailAdress = this.props.userInfo.emailAdress;\n    let userName = this.props.userInfo.userName;\n    this.setState({\n      userID: userID,\n      emailAdress: emailAdress,\n      userName: userName\n    });\n  } //Define a callback methods on survey complete\n\n\n  render() {\n    //Create the model and pass it into react Survey component\n    //You may create survey model outside the render function and use it in your App or component\n    //The most model properties are reactive, on their change the component will change UI when needed.\n    var model = new Survey.Model(this.json);\n    return /*#__PURE__*/React.createElement(Survey.Survey, {\n      model: model,\n      onComplete: this.onComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }\n    });\n    /*\r\n    //The alternative way. react Survey component will create survey model internally\r\n    return (<Survey.Survey json={this.json} onComplete={this.onComplete}/>);\r\n    */\n    //You may pass model properties directly into component or set it into model\n    // <Survey.Survey model={model} mode=\"display\"/>\n    //or\n    // model.mode=\"display\"\n    // <Survey.Survey model={model}/>\n    // You may change model properties outside render function.\n    //If needed react Survey Component will change its behavior and change UI.\n  }\n\n}\n\nexport default SurveyComponent;","map":{"version":3,"sources":["/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/BA-Study/src/components/SurveyComponent.js"],"names":["React","Component","Survey","SurveyComponent","state","userID","json","showQuestionNumbers","elements","type","name","title","isRequired","colCount","choices","columns","value","text","rows","onComplete","survey","options","console","log","JSON","stringify","data","emailAdress","UserName","userAnswers","response","fetch","method","headers","Accept","body","then","componentDidMount","props","userInfo","userName","setState","render","model","Model"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as Survey from \"survey-react\";\r\nimport \"survey-react/survey.css\";\r\nimport \"./Survey.css\";\r\n\r\nclass SurveyComponent extends Component {\r\n  state = {\r\n    userID: 0,\r\n  };\r\n\r\n  //Define Survey JSON\r\n  json = {\r\n    showQuestionNumbers: \"off\",\r\n    elements: [\r\n      {\r\n        type: \"radiogroup\",\r\n        name: \"gender\",\r\n        title: \"Please select your gender\",\r\n        isRequired: true,\r\n        colCount: 4,\r\n        choices: [\"male\", \"female\", \"other\", \"prefer not to say\"],\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"age\",\r\n        title: \"What is your age?\",\r\n        isRequired: true,\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"background\",\r\n        title: \"What is your background? (eg. Computer Science)\",\r\n        isRequired: true,\r\n      },\r\n      {\r\n        type: \"dropdown\",\r\n        name: \"Alert\",\r\n        title:\r\n          \"Which phishing alert helped you the most with recognizing the phishing emails\",\r\n        isRequired: true,\r\n        colCount: 0,\r\n        choices: [\r\n          \"Link with the red background\",\r\n          \"Blocked Link with the tooltip\",\r\n          \"Grey Overlay\",\r\n        ],\r\n      },\r\n      {\r\n        type: \"matrix\",\r\n        name: \"User Experience\",\r\n        isRequired: true,\r\n        title:\r\n          \"Please indicate if you agree or disagree with the following statements.\",\r\n        columns: [\r\n          {\r\n            value: 1,\r\n            text: \"Strongly Disagree\",\r\n          },\r\n          {\r\n            value: 2,\r\n            text: \"Disagree\",\r\n          },\r\n          {\r\n            value: 3,\r\n            text: \"Neutral\",\r\n          },\r\n          {\r\n            value: 4,\r\n            text: \"Agree\",\r\n          },\r\n          {\r\n            value: 5,\r\n            text: \"Strongly Agree\",\r\n          },\r\n        ],\r\n        rows: [\r\n          {\r\n            value: \"Experience IT Security\",\r\n            text: \"I have experience with IT Security. \",\r\n          },\r\n          {\r\n            value: \"Information presented enough\",\r\n            text:\r\n              \"I used information provided in the interface to categorize the emails. (e.g. email subject)\",\r\n          },\r\n          {\r\n            value: \"Categorize Inbox\",\r\n            text: \" I found it easy to categorize the emails as 'Inbox'.\",\r\n          },\r\n          {\r\n            value: \"Categorize Spam\",\r\n            text: \"I found it easy to categorize the emails as 'Spam'.\",\r\n          },\r\n          {\r\n            value: \"Categorize Bin\",\r\n            text: \"I found it easy to categorize the emails as 'bin'.\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"Red background\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the phishing alert with the red background were helpful? (key words are enough)\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"Blocked Link\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the phishing alert with the blocked link and the tooltip were helpful? (key words are enough)\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"Grey Overlay\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the phishing alert with the grey overlay were helpful? (key words are enough)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    let userID = this.props.userInfo.userID;\r\n    let emailAdress = this.props.userInfo.emailAdress;\r\n    let userName = this.props.userInfo.userName;\r\n    this.setState({\r\n      userID: userID,\r\n      emailAdress: emailAdress,\r\n      userName: userName,\r\n    });\r\n  }\r\n\r\n  //Define a callback methods on survey complete\r\n  onComplete = (survey, options) => {\r\n    //Write survey results into database\r\n    console.log(\"Survey results: \" + JSON.stringify(survey.data));\r\n    //Send to Server\r\n    const data = {\r\n      userID: this.state.userID,\r\n      emailAdress: this.state.emailAdress,\r\n      UserName: this.state.UserName,\r\n      userAnswers: survey.data,\r\n    };\r\n    console.log(data);\r\n    const response = fetch(\"/SurveyData\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).then(console.log(\"sentSurveyToServer\"));\r\n  };\r\n\r\n  render() {\r\n    //Create the model and pass it into react Survey component\r\n    //You may create survey model outside the render function and use it in your App or component\r\n    //The most model properties are reactive, on their change the component will change UI when needed.\r\n    var model = new Survey.Model(this.json);\r\n    return <Survey.Survey model={model} onComplete={this.onComplete} />;\r\n    /*\r\n  //The alternative way. react Survey component will create survey model internally\r\n  return (<Survey.Survey json={this.json} onComplete={this.onComplete}/>);\r\n  */\r\n    //You may pass model properties directly into component or set it into model\r\n    // <Survey.Survey model={model} mode=\"display\"/>\r\n    //or\r\n    // model.mode=\"display\"\r\n    // <Survey.Survey model={model}/>\r\n    // You may change model properties outside render function.\r\n    //If needed react Survey Component will change its behavior and change UI.\r\n  }\r\n}\r\n\r\nexport default SurveyComponent;\r\n"]},"metadata":{},"sourceType":"module"}