{"ast":null,"code":"var _jsxFileName = \"/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/ryan_steimer/Deployment/Deployment/src/components/SurveyComponent.js\";\nimport React, { Component } from \"react\";\nimport * as Survey from \"survey-react\";\nimport \"survey-react/survey.css\";\nimport \"./Survey.css\";\n\nclass SurveyComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userID: 0\n    };\n    this.json = {\n      showQuestionNumbers: \"off\",\n      elements: [{\n        type: \"radiogroup\",\n        name: \"gender\",\n        title: \"Please select your gender\",\n        isRequired: true,\n        colCount: 4,\n        choices: [\"male\", \"female\", \"other\", \"prefer not to say\"]\n      }, {\n        type: \"text\",\n        name: \"age\",\n        title: \"What is your age?\",\n        isRequired: true\n      }, {\n        type: \"text\",\n        name: \"profession\",\n        title: \"What is your profession?\",\n        isRequired: true\n      }, {\n        type: \"text\",\n        name: \"emailClient\",\n        title: \"Which email clients are you using? (eg. Gmail, Outlook etc.)\",\n        isRequired: true\n      }, {\n        type: \"checkbox\",\n        name: \"email device\",\n        title: \"Which device(s) are you using to check your emails?\",\n        isRequired: true,\n        colCount: 5,\n        choices: [\"Desktop\", \"Laptop\", \"Smartphone\", \"Tablet\", \"other\"]\n      }, {\n        type: \"dropdown\",\n        name: \"socialMediaTime\",\n        title: \"How much time do you spend on Social Media per day? (eg. Facebook, Instagram, Snapchat, TikTok)\",\n        isRequired: true,\n        colCount: 0,\n        choices: [\"None\", \"Up to 30 minutes per day\", \"Up to 1 hour per day\", \"Up to 1 1/2 hours per day\", \"Up to 2 hours per day\", \"More than 2 hours per day\"]\n      }, {\n        type: \"matrix\",\n        name: \"User Experience\",\n        isRequired: true,\n        title: \"Please indicate if you agree or disagree with the following statements.\",\n        columns: [{\n          value: 1,\n          text: \"Strongly Disagree\"\n        }, {\n          value: 2,\n          text: \"Disagree\"\n        }, {\n          value: 3,\n          text: \"Neutral\"\n        }, {\n          value: 4,\n          text: \"Agree\"\n        }, {\n          value: 5,\n          text: \"Strongly Agree\"\n        }],\n        rows: [{\n          value: \"Experience IT Security\",\n          text: \"I have experience with IT Security. \"\n        }, {\n          value: \"Information presented enough\",\n          text: \"I used information provided in the interface to categorize the emails. (e.g. email subject)\"\n        }, {\n          value: \"Categorize Important\",\n          text: \" I found it easy to categorize the emails as 'important'.\"\n        }, {\n          value: \"Categorize Spam\",\n          text: \"I found it easy to categorize the emails as 'Spam'.\"\n        }, {\n          value: \"Categorize Bin\",\n          text: \"I found it easy to categorize the emails as 'bin'.\"\n        }]\n      }, {\n        type: \"text\",\n        name: \"Important aspects\",\n        isRequired: true,\n        title: \"Which aspects of the email made you categorize it as Important? (key words are enough)\"\n      }, {\n        type: \"text\",\n        name: \"Spam aspects\",\n        isRequired: true,\n        title: \"Which aspects of the email made you categorize it as Spam? (key words are enough)\"\n      }, {\n        type: \"text\",\n        name: \"Bin aspects\",\n        isRequired: true,\n        title: \"Which aspects of the email made you categorize it as Bin? (key words are enough)\"\n      }, {\n        type: \"radiogroup\",\n        name: \"Reimbursement\",\n        title: \"How do you want to get reimbursed? (Any information given here will not be connected to the study data. Also you will receive your reimbursement within two weeks.) \",\n        isRequired: true,\n        colCount: 4,\n        choices: [\"MMI-Points\", \"5€ PayPal\", \"5€ Amazon\", \"None\"]\n      }, {\n        name: \"email\",\n        type: \"text\",\n        isRequired: true,\n        visibleIf: \"{Reimbursement}='MMI-Points' or {Reimbursement}='5€ PayPal' or {Reimbursement}='5€ Amazon' \",\n        title: \"Your E-mail:\",\n        placeHolder: \"youremail@domain.org\"\n      }, {\n        type: \"text\",\n        name: \"MMI Name\",\n        isRequired: true,\n        visibleIf: \"{Reimbursement}='MMI-Points'\",\n        title: \"Please insert your first and last name here.\"\n      }, {\n        type: \"text\",\n        name: \"MMI Matrikelnummer\",\n        isRequired: true,\n        visibleIf: \"{Reimbursement}='MMI-Points'\",\n        title: \"Please insert your enrolement number (Matrikelnummer) here.\"\n      }, {\n        type: \"text\",\n        name: \"PayPal account\",\n        isRequired: true,\n        visibleIf: \"{Reimbursement}='5€ PayPal'\",\n        title: \"Please insert your PayPal.Me-Link here.\"\n      }]\n    };\n\n    this.onComplete = (survey, options) => {\n      //Write survey results into database\n      console.log(\"Survey results: \" + JSON.stringify(survey.data)); //Send to Server\n\n      const data = {\n        userID: this.state.userID,\n        userAnswers: survey.data\n      };\n      const response = fetch(\"/SurveyData\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(console.log(\"sentSurveyToServer\"));\n    };\n  }\n\n  componentDidMount() {\n    let userID = this.props.userInfo.userID;\n    this.setState({\n      userID: userID\n    });\n  } //Define a callback methods on survey complete\n\n\n  render() {\n    //Create the model and pass it into react Survey component\n    //You may create survey model outside the render function and use it in your App or component\n    //The most model properties are reactive, on their change the component will change UI when needed.\n    var model = new Survey.Model(this.json);\n    return /*#__PURE__*/React.createElement(Survey.Survey, {\n      model: model,\n      onComplete: this.onComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 12\n      }\n    });\n    /*\r\n    //The alternative way. react Survey component will create survey model internally\r\n    return (<Survey.Survey json={this.json} onComplete={this.onComplete}/>);\r\n    */\n    //You may pass model properties directly into component or set it into model\n    // <Survey.Survey model={model} mode=\"display\"/>\n    //or\n    // model.mode=\"display\"\n    // <Survey.Survey model={model}/>\n    // You may change model properties outside render function.\n    //If needed react Survey Component will change its behavior and change UI.\n  }\n\n}\n\nexport default SurveyComponent;","map":{"version":3,"sources":["/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/ryan_steimer/Deployment/Deployment/src/components/SurveyComponent.js"],"names":["React","Component","Survey","SurveyComponent","state","userID","json","showQuestionNumbers","elements","type","name","title","isRequired","colCount","choices","columns","value","text","rows","visibleIf","placeHolder","onComplete","survey","options","console","log","JSON","stringify","data","userAnswers","response","fetch","method","headers","Accept","body","then","componentDidMount","props","userInfo","setState","render","model","Model"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as Survey from \"survey-react\";\r\nimport \"survey-react/survey.css\";\r\nimport \"./Survey.css\";\r\n\r\nclass SurveyComponent extends Component {\r\n  state = {\r\n    userID: 0,\r\n  };\r\n\r\n  //Define Survey JSON\r\n  json = {\r\n    showQuestionNumbers: \"off\",\r\n    elements: [\r\n      {\r\n        type: \"radiogroup\",\r\n        name: \"gender\",\r\n        title: \"Please select your gender\",\r\n        isRequired: true,\r\n        colCount: 4,\r\n        choices: [\"male\", \"female\", \"other\", \"prefer not to say\"],\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"age\",\r\n        title: \"What is your age?\",\r\n        isRequired: true,\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"profession\",\r\n        title: \"What is your profession?\",\r\n        isRequired: true,\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"emailClient\",\r\n        title: \"Which email clients are you using? (eg. Gmail, Outlook etc.)\",\r\n        isRequired: true,\r\n      },\r\n      {\r\n        type: \"checkbox\",\r\n        name: \"email device\",\r\n        title: \"Which device(s) are you using to check your emails?\",\r\n        isRequired: true,\r\n        colCount: 5,\r\n        choices: [\"Desktop\", \"Laptop\", \"Smartphone\", \"Tablet\", \"other\"],\r\n      },\r\n      {\r\n        type: \"dropdown\",\r\n        name: \"socialMediaTime\",\r\n        title:\r\n          \"How much time do you spend on Social Media per day? (eg. Facebook, Instagram, Snapchat, TikTok)\",\r\n        isRequired: true,\r\n        colCount: 0,\r\n        choices: [\r\n          \"None\",\r\n          \"Up to 30 minutes per day\",\r\n          \"Up to 1 hour per day\",\r\n          \"Up to 1 1/2 hours per day\",\r\n          \"Up to 2 hours per day\",\r\n          \"More than 2 hours per day\",\r\n        ],\r\n      },\r\n      {\r\n        type: \"matrix\",\r\n        name: \"User Experience\",\r\n        isRequired: true,\r\n        title:\r\n          \"Please indicate if you agree or disagree with the following statements.\",\r\n        columns: [\r\n          {\r\n            value: 1,\r\n            text: \"Strongly Disagree\",\r\n          },\r\n          {\r\n            value: 2,\r\n            text: \"Disagree\",\r\n          },\r\n          {\r\n            value: 3,\r\n            text: \"Neutral\",\r\n          },\r\n          {\r\n            value: 4,\r\n            text: \"Agree\",\r\n          },\r\n          {\r\n            value: 5,\r\n            text: \"Strongly Agree\",\r\n          },\r\n        ],\r\n        rows: [\r\n          {\r\n            value: \"Experience IT Security\",\r\n            text: \"I have experience with IT Security. \",\r\n          },\r\n          {\r\n            value: \"Information presented enough\",\r\n            text:\r\n              \"I used information provided in the interface to categorize the emails. (e.g. email subject)\",\r\n          },\r\n          {\r\n            value: \"Categorize Important\",\r\n            text: \" I found it easy to categorize the emails as 'important'.\",\r\n          },\r\n          {\r\n            value: \"Categorize Spam\",\r\n            text: \"I found it easy to categorize the emails as 'Spam'.\",\r\n          },\r\n          {\r\n            value: \"Categorize Bin\",\r\n            text: \"I found it easy to categorize the emails as 'bin'.\",\r\n          },\r\n        ],\r\n      },\r\n\r\n      {\r\n        type: \"text\",\r\n        name: \"Important aspects\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the email made you categorize it as Important? (key words are enough)\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"Spam aspects\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the email made you categorize it as Spam? (key words are enough)\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"Bin aspects\",\r\n        isRequired: true,\r\n        title:\r\n          \"Which aspects of the email made you categorize it as Bin? (key words are enough)\",\r\n      },\r\n      {\r\n        type: \"radiogroup\",\r\n        name: \"Reimbursement\",\r\n        title:\r\n          \"How do you want to get reimbursed? (Any information given here will not be connected to the study data. Also you will receive your reimbursement within two weeks.) \",\r\n        isRequired: true,\r\n        colCount: 4,\r\n        choices: [\"MMI-Points\", \"5€ PayPal\", \"5€ Amazon\", \"None\"],\r\n      },\r\n      {\r\n        name: \"email\",\r\n        type: \"text\",\r\n        isRequired: true,\r\n        visibleIf:\r\n          \"{Reimbursement}='MMI-Points' or {Reimbursement}='5€ PayPal' or {Reimbursement}='5€ Amazon' \",\r\n        title: \"Your E-mail:\",\r\n        placeHolder: \"youremail@domain.org\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"MMI Name\",\r\n        isRequired: true,\r\n        visibleIf: \"{Reimbursement}='MMI-Points'\",\r\n        title: \"Please insert your first and last name here.\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"MMI Matrikelnummer\",\r\n        isRequired: true,\r\n        visibleIf: \"{Reimbursement}='MMI-Points'\",\r\n        title: \"Please insert your enrolement number (Matrikelnummer) here.\",\r\n      },\r\n      {\r\n        type: \"text\",\r\n        name: \"PayPal account\",\r\n        isRequired: true,\r\n        visibleIf: \"{Reimbursement}='5€ PayPal'\",\r\n        title: \"Please insert your PayPal.Me-Link here.\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    let userID = this.props.userInfo.userID;\r\n    this.setState({ userID: userID });\r\n  }\r\n\r\n  //Define a callback methods on survey complete\r\n  onComplete = (survey, options) => {\r\n    //Write survey results into database\r\n    console.log(\"Survey results: \" + JSON.stringify(survey.data));\r\n    //Send to Server\r\n    const data = {\r\n      userID: this.state.userID,\r\n      userAnswers: survey.data,\r\n    };\r\n\r\n    const response = fetch(\"/SurveyData\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).then(console.log(\"sentSurveyToServer\"));\r\n  };\r\n\r\n  render() {\r\n    //Create the model and pass it into react Survey component\r\n    //You may create survey model outside the render function and use it in your App or component\r\n    //The most model properties are reactive, on their change the component will change UI when needed.\r\n    var model = new Survey.Model(this.json);\r\n    return <Survey.Survey model={model} onComplete={this.onComplete} />;\r\n    /*\r\n  //The alternative way. react Survey component will create survey model internally\r\n  return (<Survey.Survey json={this.json} onComplete={this.onComplete}/>);\r\n  */\r\n    //You may pass model properties directly into component or set it into model\r\n    // <Survey.Survey model={model} mode=\"display\"/>\r\n    //or\r\n    // model.mode=\"display\"\r\n    // <Survey.Survey model={model}/>\r\n    // You may change model properties outside render function.\r\n    //If needed react Survey Component will change its behavior and change UI.\r\n  }\r\n}\r\n\r\nexport default SurveyComponent;\r\n"]},"metadata":{},"sourceType":"module"}