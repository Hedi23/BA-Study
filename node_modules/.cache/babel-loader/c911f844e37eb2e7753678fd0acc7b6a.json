{"ast":null,"code":"var _jsxFileName = \"/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/ryan_steimer/Deployment/Deployment/src/components/emailClient.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport AllInbox from \"./allInbox\";\nimport SpamInbox from \"./spamInbox\";\nimport BinInbox from \"./binInbox\";\nimport ImportantInbox from \"./importantInbox\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport Inbox from \"./emailsToImplement.js\";\nimport Badge from \"@material-ui/core/Badge\";\nimport \"./EmailClient.css\";\nimport ProfileBox from \"./ProfileBox\";\n\nclass EmailClient extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentInbox: \"AllInbox\",\n      inbox: Inbox,\n      mailNrBadge: 0,\n      alerted: false,\n      allInboxEmpty: false\n    };\n\n    this.shuffleArray = a => {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    this.componentWillMount = () => {\n      let copy = this.state;\n      let usersInbox = [];\n      copy.inbox.map(email => {\n        if (email.visible) usersInbox.push(email);\n      });\n      usersInbox.map(email => {\n        email[\"type\"] = \"AllInbox\";\n      });\n      this.shuffleArray(usersInbox);\n      copy.inbox = usersInbox;\n      this.setState(copy);\n      this.countEmails();\n    };\n\n    this.getAllInboxLength = () => {\n      var counter2 = 0;\n      this.state.inbox.forEach(element => {\n        if (element.type === \"AllInbox\") {\n          counter2++;\n        } else {\n          return;\n        }\n      });\n\n      if (counter2 === 0) {\n        let copy = this.state;\n        copy.allInboxEmpty = true;\n        this.setState(copy);\n      }\n    };\n\n    this.handleIncomingEvent = event => {\n      let copy = this.state;\n      copy.events.push(event);\n      this.setState(copy);\n    };\n\n    this.onMoveToSpam = emailID => {\n      let copy = this.state;\n      copy.inbox.map(email => {\n        if (email.mail.defaultProps.keyID === emailID) email.type = \"SpamInbox\";\n      });\n      this.props.clickedButton(\"SpamInboxButtonClicked\", \"InMoveToSpamButton\");\n      this.setState(copy);\n      this.getAllInboxLength();\n      this.forceUpdate();\n    };\n\n    this.onMoveToBin = emailID => {\n      let copy = this.state;\n      copy.inbox.map(email => {\n        if (email.mail.defaultProps.keyID === emailID) email.type = \"BinInbox\";\n      });\n      this.props.clickedButton(\"BinInboxButtonClicked\", \"InMoveToBinButton\");\n      this.setState(copy);\n      this.getAllInboxLength();\n      this.forceUpdate();\n    };\n\n    this.onMoveToImportant = emailID => {\n      let copy = this.state;\n      copy.inbox.map(email => {\n        if (email.mail.defaultProps.keyID === emailID) email.type = \"ImportantInbox\";\n      });\n      this.props.clickedButton(\"ImportantInboxButtonClicked\", \"InMoveToImportantButton\");\n      this.setState(copy);\n      this.getAllInboxLength();\n      this.forceUpdate();\n    };\n\n    this.countEmails = () => {\n      let counter = 0;\n      this.state.inbox.forEach(element => {\n        counter = element.mail.defaultProps.unseen === true ? counter + 1 : counter;\n      });\n      let copy = this.state;\n      copy.mailNrBadge = counter;\n\n      if (counter === 0 && this.state.alerted === false) {\n        alert(\"You have viewed all Emails\");\n        copy.alerted = true;\n      }\n\n      this.setState(copy);\n    };\n\n    this.handleInboxChange = whichInbox => {\n      let copy = this.state;\n      copy.currentInbox = whichInbox;\n      copy.currentEmail = undefined;\n      this.setState(copy);\n    };\n\n    this.handleNewEmail = emailNr => {\n      this.props.onNewEmail(emailNr);\n      this.state.inbox.forEach(element => {\n        if (element.mail.defaultProps.keyID === emailNr) {\n          let index = this.state.inbox.indexOf(element);\n          let copy = this.state.inbox;\n          copy[index].mail.defaultProps.unseen = false;\n          this.setState({\n            inbox: copy\n          });\n        }\n      });\n      this.countEmails();\n    };\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const currentInbox = this.state.currentInbox;\n    let inbox;\n\n    if (currentInbox === \"BinInbox\") {\n      inbox = /*#__PURE__*/React.createElement(BinInbox, {\n        inEmailScrollAmount: this.props.inEmailScrollAmount,\n        Mails: this.state.inbox,\n        onMoveToSpam: this.onMoveToSpam,\n        onMoveToBin: this.onMoveToBin,\n        onMoveToImportant: this.onMoveToImportant,\n        onNewEmail: this.handleNewEmail,\n        Recipient: this.props.UserInfo.emailAdress,\n        userName: this.props.UserInfo.userName,\n        insideEmailInfo: this.props.insideEmailInfo,\n        inEmailText: this.props.inEmailText,\n        outsideEmailInfo: this.props.outsideEmailInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      });\n    } else if (currentInbox === \"AllInbox\") {\n      inbox = /*#__PURE__*/React.createElement(AllInbox, {\n        inEmailScrollAmount: this.props.inEmailScrollAmount,\n        Mails: this.state.inbox,\n        onMoveToSpam: this.onMoveToSpam,\n        onMoveToBin: this.onMoveToBin,\n        onMoveToImportant: this.onMoveToImportant,\n        onNewEmail: this.handleNewEmail,\n        Recipient: this.props.UserInfo.emailAdress,\n        userName: this.props.UserInfo.userName,\n        insideEmailInfo: this.props.insideEmailInfo,\n        inEmailText: this.props.inEmailText,\n        outsideEmailInfo: this.props.outsideEmailInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      });\n    } else if (currentInbox === \"SpamInbox\") {\n      inbox = /*#__PURE__*/React.createElement(SpamInbox, {\n        inEmailScrollAmount: this.props.inEmailScrollAmount,\n        Mails: this.state.inbox,\n        onMoveToSpam: this.onMoveToSpam,\n        onMoveToBin: this.onMoveToBin,\n        onMoveToImportant: this.onMoveToImportant,\n        onNewEmail: this.handleNewEmail,\n        Recipient: this.props.UserInfo.emailAdress,\n        userName: this.props.UserInfo.userName,\n        insideEmailInfo: this.props.insideEmailInfo,\n        inEmailText: this.props.inEmailText,\n        outsideEmailInfo: this.props.outsideEmailInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      });\n    } else if (currentInbox === \"ImportantInbox\") {\n      inbox = /*#__PURE__*/React.createElement(ImportantInbox, {\n        inEmailScrollAmount: this.props.inEmailScrollAmount,\n        Mails: this.state.inbox,\n        onMoveToSpam: this.onMoveToSpam,\n        onMoveToBin: this.onMoveToBin,\n        onMoveToImportant: this.onMoveToImportant,\n        onNewEmail: this.handleNewEmail,\n        Recipient: this.props.UserInfo.emailAdress,\n        userName: this.props.UserInfo.userName,\n        insideEmailInfo: this.props.insideEmailInfo,\n        inEmailText: this.props.inEmailText,\n        outsideEmailInfo: this.props.outsideEmailInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"entireClient\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"HeaderInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, \"Welcome to your Email Client, \", this.props.UserInfo.userName), /*#__PURE__*/React.createElement(ProfileBox, {\n      className: \"ProfileBox\",\n      setInboxResult: () => this.props.setInboxResult(this.state.inbox) //allInboxEmpty={this.state.allInboxEmpty}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"nav-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/EmailClient/AllMails\",\n      onClick: () => {\n        this.handleInboxChange(\"AllInbox\");\n        this.props.onNewInbox(\"AllInbox\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"button-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      badgeContent: this.state.mailNrBadge,\n      color: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        width: \"200px\",\n        height: \"50px\"\n      },\n      variant: \"outlined\",\n      color: currentInbox === \"AllInbox\" ? \"primary\" : \"\",\n      startIcon: /*#__PURE__*/React.createElement(InboxIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 32\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, \"All Mail\")))), /*#__PURE__*/React.createElement(Link, {\n      to: \"/EmailClient/ImportantInbox\",\n      onClick: () => {\n        this.handleInboxChange(\"ImportantInbox\");\n        this.props.onNewInbox(\"ImportantInbox\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"button-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        width: \"200px\",\n        height: \"50px\"\n      },\n      variant: \"outlined\",\n      color: currentInbox === \"ImportantInbox\" ? \"primary\" : \"\",\n      startIcon: /*#__PURE__*/React.createElement(EmailIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 30\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }\n    }, \"Inbox\"))), /*#__PURE__*/React.createElement(Link, {\n      to: \"/EmailClient/Spam\",\n      onClick: () => {\n        this.handleInboxChange(\"SpamInbox\");\n        this.props.onNewInbox(\"SpamInbox\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"button-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        width: \"200px\",\n        height: \"50px\"\n      },\n      variant: \"outlined\",\n      color: currentInbox === \"SpamInbox\" ? \"primary\" : \"\",\n      startIcon: /*#__PURE__*/React.createElement(ErrorIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 30\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }\n    }, \"Spam\"))), /*#__PURE__*/React.createElement(Link, {\n      to: \"/EmailClient/Bin\",\n      onClick: () => {\n        this.handleInboxChange(\"BinInbox\");\n        this.props.onNewInbox(\"BinInbox\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"button-links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        width: \"150px\",\n        height: \"50px\"\n      },\n      variant: \"outlined\",\n      color: currentInbox === \"BinInbox\" ? \"primary\" : \"\",\n      startIcon: /*#__PURE__*/React.createElement(DeleteIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 30\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }, \"Bin\"))))), inbox);\n  }\n\n}\n\nexport default EmailClient;","map":{"version":3,"sources":["/Users/Hedi/Documents/S/WS20:21/Bachelorarbeit/ryan_steimer/Deployment/Deployment/src/components/emailClient.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","AllInbox","SpamInbox","BinInbox","ImportantInbox","Button","DeleteIcon","ErrorIcon","InboxIcon","EmailIcon","Inbox","Badge","ProfileBox","EmailClient","state","currentInbox","inbox","mailNrBadge","alerted","allInboxEmpty","shuffleArray","a","j","x","i","length","Math","floor","random","componentWillMount","copy","usersInbox","map","email","visible","push","setState","countEmails","getAllInboxLength","counter2","forEach","element","type","handleIncomingEvent","event","events","onMoveToSpam","emailID","mail","defaultProps","keyID","props","clickedButton","forceUpdate","onMoveToBin","onMoveToImportant","counter","unseen","alert","handleInboxChange","whichInbox","currentEmail","undefined","handleNewEmail","emailNr","onNewEmail","index","indexOf","componentDidMount","window","scrollTo","render","inEmailScrollAmount","UserInfo","emailAdress","userName","insideEmailInfo","inEmailText","outsideEmailInfo","setInboxResult","onNewInbox","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport AllInbox from \"./allInbox\";\nimport SpamInbox from \"./spamInbox\";\nimport BinInbox from \"./binInbox\";\nimport ImportantInbox from \"./importantInbox\";\n\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport Inbox from \"./emailsToImplement.js\";\nimport Badge from \"@material-ui/core/Badge\";\nimport \"./EmailClient.css\";\nimport ProfileBox from \"./ProfileBox\";\nclass EmailClient extends Component {\n  state = {\n    currentInbox: \"AllInbox\",\n    inbox: Inbox,\n    mailNrBadge: 0,\n    alerted: false,\n    allInboxEmpty: false,\n  };\n\n  //Fisher Yates Array shuffle algorithm\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  };\n\n  componentWillMount = () => {\n    let copy = this.state;\n    let usersInbox = [];\n\n    copy.inbox.map((email) => {\n      if (email.visible) usersInbox.push(email);\n    });\n\n    usersInbox.map((email) => {\n      email[\"type\"] = \"AllInbox\";\n    });\n\n    this.shuffleArray(usersInbox);\n    copy.inbox = usersInbox;\n    this.setState(copy);\n    this.countEmails();\n  };\n\n  getAllInboxLength = () => {\n    var counter2 = 0;\n    this.state.inbox.forEach((element) => {\n      if (element.type === \"AllInbox\") {\n        counter2++;\n      } else {\n        return;\n      }\n    });\n    if (counter2 === 0) {\n      let copy = this.state;\n      copy.allInboxEmpty = true;\n      this.setState(copy);\n    }\n  };\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  handleIncomingEvent = (event) => {\n    let copy = this.state;\n    copy.events.push(event);\n    this.setState(copy);\n  };\n\n  onMoveToSpam = (emailID) => {\n    let copy = this.state;\n    copy.inbox.map((email) => {\n      if (email.mail.defaultProps.keyID === emailID) email.type = \"SpamInbox\";\n    });\n    this.props.clickedButton(\"SpamInboxButtonClicked\", \"InMoveToSpamButton\");\n    this.setState(copy);\n    this.getAllInboxLength();\n    this.forceUpdate();\n  };\n\n  onMoveToBin = (emailID) => {\n    let copy = this.state;\n    copy.inbox.map((email) => {\n      if (email.mail.defaultProps.keyID === emailID) email.type = \"BinInbox\";\n    });\n    this.props.clickedButton(\"BinInboxButtonClicked\", \"InMoveToBinButton\");\n    this.setState(copy);\n    this.getAllInboxLength();\n    this.forceUpdate();\n  };\n\n  onMoveToImportant = (emailID) => {\n    let copy = this.state;\n    copy.inbox.map((email) => {\n      if (email.mail.defaultProps.keyID === emailID)\n        email.type = \"ImportantInbox\";\n    });\n    this.props.clickedButton(\n      \"ImportantInboxButtonClicked\",\n      \"InMoveToImportantButton\"\n    );\n    this.setState(copy);\n    this.getAllInboxLength();\n    this.forceUpdate();\n  };\n\n  countEmails = () => {\n    let counter = 0;\n    this.state.inbox.forEach((element) => {\n      counter =\n        element.mail.defaultProps.unseen === true ? counter + 1 : counter;\n    });\n    let copy = this.state;\n    copy.mailNrBadge = counter;\n\n    if (counter === 0 && this.state.alerted === false) {\n      alert(\"You have viewed all Emails\");\n      copy.alerted = true;\n    }\n\n    this.setState(copy);\n  };\n\n  handleInboxChange = (whichInbox) => {\n    let copy = this.state;\n    copy.currentInbox = whichInbox;\n    copy.currentEmail = undefined;\n    this.setState(copy);\n  };\n\n  handleNewEmail = (emailNr) => {\n    this.props.onNewEmail(emailNr);\n    this.state.inbox.forEach((element) => {\n      if (element.mail.defaultProps.keyID === emailNr) {\n        let index = this.state.inbox.indexOf(element);\n        let copy = this.state.inbox;\n        copy[index].mail.defaultProps.unseen = false;\n        this.setState({ inbox: copy });\n      }\n    });\n    this.countEmails();\n  };\n\n  render() {\n    const currentInbox = this.state.currentInbox;\n    let inbox;\n\n    if (currentInbox === \"BinInbox\") {\n      inbox = (\n        <BinInbox\n          inEmailScrollAmount={this.props.inEmailScrollAmount}\n          Mails={this.state.inbox}\n          onMoveToSpam={this.onMoveToSpam}\n          onMoveToBin={this.onMoveToBin}\n          onMoveToImportant={this.onMoveToImportant}\n          onNewEmail={this.handleNewEmail}\n          Recipient={this.props.UserInfo.emailAdress}\n          userName={this.props.UserInfo.userName}\n          insideEmailInfo={this.props.insideEmailInfo}\n          inEmailText={this.props.inEmailText}\n          outsideEmailInfo={this.props.outsideEmailInfo}\n        ></BinInbox>\n      );\n    } else if (currentInbox === \"AllInbox\") {\n      inbox = (\n        <AllInbox\n          inEmailScrollAmount={this.props.inEmailScrollAmount}\n          Mails={this.state.inbox}\n          onMoveToSpam={this.onMoveToSpam}\n          onMoveToBin={this.onMoveToBin}\n          onMoveToImportant={this.onMoveToImportant}\n          onNewEmail={this.handleNewEmail}\n          Recipient={this.props.UserInfo.emailAdress}\n          userName={this.props.UserInfo.userName}\n          insideEmailInfo={this.props.insideEmailInfo}\n          inEmailText={this.props.inEmailText}\n          outsideEmailInfo={this.props.outsideEmailInfo}\n        ></AllInbox>\n      );\n    } else if (currentInbox === \"SpamInbox\") {\n      inbox = (\n        <SpamInbox\n          inEmailScrollAmount={this.props.inEmailScrollAmount}\n          Mails={this.state.inbox}\n          onMoveToSpam={this.onMoveToSpam}\n          onMoveToBin={this.onMoveToBin}\n          onMoveToImportant={this.onMoveToImportant}\n          onNewEmail={this.handleNewEmail}\n          Recipient={this.props.UserInfo.emailAdress}\n          userName={this.props.UserInfo.userName}\n          insideEmailInfo={this.props.insideEmailInfo}\n          inEmailText={this.props.inEmailText}\n          outsideEmailInfo={this.props.outsideEmailInfo}\n        ></SpamInbox>\n      );\n    } else if (currentInbox === \"ImportantInbox\") {\n      inbox = (\n        <ImportantInbox\n          inEmailScrollAmount={this.props.inEmailScrollAmount}\n          Mails={this.state.inbox}\n          onMoveToSpam={this.onMoveToSpam}\n          onMoveToBin={this.onMoveToBin}\n          onMoveToImportant={this.onMoveToImportant}\n          onNewEmail={this.handleNewEmail}\n          Recipient={this.props.UserInfo.emailAdress}\n          userName={this.props.UserInfo.userName}\n          insideEmailInfo={this.props.insideEmailInfo}\n          inEmailText={this.props.inEmailText}\n          outsideEmailInfo={this.props.outsideEmailInfo}\n        ></ImportantInbox>\n      );\n    }\n\n    return (\n      <div className=\"entireClient\">\n        <div className=\"HeaderInfo\">\n          <p>Welcome to your Email Client, {this.props.UserInfo.userName}</p>\n          <ProfileBox\n            className=\"ProfileBox\"\n            setInboxResult={() => this.props.setInboxResult(this.state.inbox)}\n            //allInboxEmpty={this.state.allInboxEmpty}\n          ></ProfileBox>\n        </div>\n        <nav className=\"nav-links\">\n          <ul>\n            <Link\n              to=\"/EmailClient/AllMails\"\n              onClick={() => {\n                this.handleInboxChange(\"AllInbox\");\n                this.props.onNewInbox(\"AllInbox\");\n              }}\n            >\n              <li className=\"button-links\">\n                <Badge badgeContent={this.state.mailNrBadge} color=\"error\">\n                  <Button\n                    style={{ width: \"200px\", height: \"50px\" }}\n                    variant=\"outlined\"\n                    color={currentInbox === \"AllInbox\" ? \"primary\" : \"\"}\n                    startIcon={<InboxIcon />}\n                  >\n                    All Mail\n                  </Button>\n                </Badge>\n              </li>\n            </Link>\n            <Link\n              to=\"/EmailClient/ImportantInbox\"\n              onClick={() => {\n                this.handleInboxChange(\"ImportantInbox\");\n                this.props.onNewInbox(\"ImportantInbox\");\n              }}\n            >\n              <li className=\"button-links\">\n                <Button\n                  style={{ width: \"200px\", height: \"50px\" }}\n                  variant=\"outlined\"\n                  color={currentInbox === \"ImportantInbox\" ? \"primary\" : \"\"}\n                  startIcon={<EmailIcon />}\n                >\n                  Inbox\n                </Button>\n              </li>\n            </Link>\n            <Link\n              to=\"/EmailClient/Spam\"\n              onClick={() => {\n                this.handleInboxChange(\"SpamInbox\");\n                this.props.onNewInbox(\"SpamInbox\");\n              }}\n            >\n              <li className=\"button-links\">\n                <Button\n                  style={{ width: \"200px\", height: \"50px\" }}\n                  variant=\"outlined\"\n                  color={currentInbox === \"SpamInbox\" ? \"primary\" : \"\"}\n                  startIcon={<ErrorIcon />}\n                >\n                  Spam\n                </Button>\n              </li>\n            </Link>\n            <Link\n              to=\"/EmailClient/Bin\"\n              onClick={() => {\n                this.handleInboxChange(\"BinInbox\");\n                this.props.onNewInbox(\"BinInbox\");\n              }}\n            >\n              <li className=\"button-links\">\n                <Button\n                  style={{ width: \"150px\", height: \"50px\" }}\n                  variant=\"outlined\"\n                  color={currentInbox === \"BinInbox\" ? \"primary\" : \"\"}\n                  startIcon={<DeleteIcon />}\n                >\n                  Bin\n                </Button>\n              </li>\n            </Link>\n          </ul>\n        </nav>\n        {inbox}\n      </div>\n    );\n  }\n}\n\nexport default EmailClient;\n"]},"metadata":{},"sourceType":"module"}